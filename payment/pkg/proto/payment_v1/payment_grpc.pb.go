// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.1
// source: payment.proto

package payment_v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentV1Client is the client API for PaymentV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentV1Client interface {
	PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error)
}

type paymentV1Client struct {
	cc grpc.ClientConnInterface
}

func NewPaymentV1Client(cc grpc.ClientConnInterface) PaymentV1Client {
	return &paymentV1Client{cc}
}

func (c *paymentV1Client) PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error) {
	out := new(PayOrderResponse)
	err := c.cc.Invoke(ctx, "/payment_v1.PaymentV1/PayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentV1Server is the server API for PaymentV1 service.
// All implementations must embed UnimplementedPaymentV1Server
// for forward compatibility
type PaymentV1Server interface {
	PayOrder(context.Context, *PayOrderRequest) (*PayOrderResponse, error)
	mustEmbedUnimplementedPaymentV1Server()
}

// UnimplementedPaymentV1Server must be embedded to have forward compatible implementations.
type UnimplementedPaymentV1Server struct{}

func (UnimplementedPaymentV1Server) PayOrder(context.Context, *PayOrderRequest) (*PayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrder not implemented")
}
func (UnimplementedPaymentV1Server) mustEmbedUnimplementedPaymentV1Server() {}

// UnsafePaymentV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentV1Server will
// result in compilation errors.
type UnsafePaymentV1Server interface {
	mustEmbedUnimplementedPaymentV1Server()
}

func RegisterPaymentV1Server(s grpc.ServiceRegistrar, srv PaymentV1Server) {
	s.RegisterService(&PaymentV1_ServiceDesc, srv)
}

func _PaymentV1_PayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentV1Server).PayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment_v1.PaymentV1/PayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentV1Server).PayOrder(ctx, req.(*PayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentV1_ServiceDesc is the grpc.ServiceDesc for PaymentV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment_v1.PaymentV1",
	HandlerType: (*PaymentV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayOrder",
			Handler:    _PaymentV1_PayOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
