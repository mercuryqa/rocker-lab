// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.1
// source: inventory.proto

package inventory_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryStorageClient is the client API for InventoryStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryStorageClient interface {
	GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*GetPartResponse, error)
	ListParts(ctx context.Context, in *GetListPartRequest, opts ...grpc.CallOption) (*GetListPartResponse, error)
}

type inventoryStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryStorageClient(cc grpc.ClientConnInterface) InventoryStorageClient {
	return &inventoryStorageClient{cc}
}

func (c *inventoryStorageClient) GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*GetPartResponse, error) {
	out := new(GetPartResponse)
	err := c.cc.Invoke(ctx, "/inventoryV1.InventoryStorage/GetPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryStorageClient) ListParts(ctx context.Context, in *GetListPartRequest, opts ...grpc.CallOption) (*GetListPartResponse, error) {
	out := new(GetListPartResponse)
	err := c.cc.Invoke(ctx, "/inventoryV1.InventoryStorage/ListParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryStorageServer is the server API for InventoryStorage service.
// All implementations must embed UnimplementedInventoryStorageServer
// for forward compatibility
type InventoryStorageServer interface {
	GetPart(context.Context, *GetPartRequest) (*GetPartResponse, error)
	ListParts(context.Context, *GetListPartRequest) (*GetListPartResponse, error)
	mustEmbedUnimplementedInventoryStorageServer()
}

// UnimplementedInventoryStorageServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryStorageServer struct {
}

func (UnimplementedInventoryStorageServer) GetPart(context.Context, *GetPartRequest) (*GetPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPart not implemented")
}
func (UnimplementedInventoryStorageServer) ListParts(context.Context, *GetListPartRequest) (*GetListPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParts not implemented")
}
func (UnimplementedInventoryStorageServer) mustEmbedUnimplementedInventoryStorageServer() {}

// UnsafeInventoryStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryStorageServer will
// result in compilation errors.
type UnsafeInventoryStorageServer interface {
	mustEmbedUnimplementedInventoryStorageServer()
}

func RegisterInventoryStorageServer(s grpc.ServiceRegistrar, srv InventoryStorageServer) {
	s.RegisterService(&InventoryStorage_ServiceDesc, srv)
}

func _InventoryStorage_GetPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryStorageServer).GetPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventoryV1.InventoryStorage/GetPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryStorageServer).GetPart(ctx, req.(*GetPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryStorage_ListParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryStorageServer).ListParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventoryV1.InventoryStorage/ListParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryStorageServer).ListParts(ctx, req.(*GetListPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryStorage_ServiceDesc is the grpc.ServiceDesc for InventoryStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventoryV1.InventoryStorage",
	HandlerType: (*InventoryStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPart",
			Handler:    _InventoryStorage_GetPart_Handler,
		},
		{
			MethodName: "ListParts",
			Handler:    _InventoryStorage_ListParts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
